dataproducts:
- name: Healthcare Dataset
  dataProductId: dp-a1efb46b-583c-47fd-b4be-b6bd49777525
  productType: 0
  description: "Healthcare Dataset is published by vikrant@vapusdata.com in dmn-29c7ff1d-33cd-4b80-b322-eb5af50264d8
    and is a MARKETPLACE_PRODUCT data product.Below is the data Schema of the product:
    \\nInput Ports:  | Domain:  | Service: GCP_CLOUD_SQL | Service Provider: SSP_GCP
    | Source Engine: POSTGRES \\nSchema of healthcare are as follows: \\n \nSchemas
    - public \\n\nTable Structures: - Table: medical_records in schema: public has
    Columns: {Column: room_number of type: integer with null: YES}, {Column: date_of_admission
    of type: date with null: YES}, {Column: discharge_date of type: date with null:
    YES}, {Column: age of type: integer with null: YES}, {Column: billing_amount of
    type: double precision with null: YES}, {Column: hospital of type: character varying
    with null: YES}, {Column: insurance_provider of type: character varying with null:
    YES}, {Column: admission_type of type: character varying with null: YES}, {Column:
    medication of type: character varying with null: YES}, {Column: name of type:
    character varying with null: YES}, {Column: test_results of type: character varying
    with null: YES}, {Column: gender of type: character varying with null: YES}, {Column:
    blood_type of type: character varying with null: YES}, {Column: medical_condition
    of type: character varying with null: YES}, {Column: doctor of type: character
    varying with null: YES},  & Constraints:  \\n \\n.\nCompliance fields:  \\n.{Field:
    name in Table: medical_records with classification: PII & type: GDPR},{Field:
    insurance_provider in Table: medical_records with classification: EPHII & type:
    GDPR,HIPAA},{Field: gender in Table: medical_records with classification: PII
    & type: GDPR},{Field: test_results in Table: medical_records with classification:
    EPHII & type: HIPAA},{Field: medical_condition in Table: medical_records with
    classification: EPHII & type: HIPAA},{Field: date_of_admission in Table: medical_records
    with classification: EPHII & type: GDPR,HIPAA},{Field: doctor in Table: medical_records
    with classification: EPHII & type: HIPAA},{Field: age in Table: medical_records
    with classification: PII & type: GDPR},{Field: billing_amount in Table: medical_records
    with classification: SENSITIVE & type: GDPR},{Field: discharge_date in Table:
    medical_records with classification: EPHII & type: GDPR,HIPAA},"
  domain: dmn-29c7ff1d-33cd-4b80-b322-eb5af50264d8
  catalog: healthcare_unit_catalog
  productOwners:
  - vikrant@vapusdata.com
  contract:
    governance:
      transformerPolicies:
      - transformers:
          steps: []
          globals:
            classified:
            - entities:
              - blood_type
              action: REDACT
            - entities:
              - name
              action: FAKE
            vars: []
            useDeclared: false
          scripts: []
          embeddingTransformers: []
        selectorLabel: data-analytics-dept
      - transformers:
          steps: []
          globals:
            classified:
            - entities:
              - medical_condition
              - test_results
              action: REDACT
            - entities:
              - room_number
              action: FAKE
            vars: []
            useDeclared: false
          scripts: []
          embeddingTransformers: []
        selectorLabel: engg-dept
      - transformers:
          steps: []
          globals:
            classified:
            - entities:
              - room_number
              - blood_type
              - medical_condition
              - test_results
              action: REDACT
            - entities:
              - insurance_provider
              action: FAKE
            vars: []
            useDeclared: false
          scripts: []
          embeddingTransformers: []
        selectorLabel: support-dept
      attributePolicies:
      - filters:
        - attributeName: admission_type
          filterValue: Emergency
          consumerAttributeRef: ""
        selectorLabel: emergency-support-dept
      dataStorePolicies: []
    interface: 0
    ioPorts:
      inputPorts:
      - service: GCP_CLOUD_SQL
        serviceProvider: SSP_GCP
        sourceType: DSDT_DATABASE
        serviceEngine: POSTGRES
        ownerDomain: ""
        name: ""
        sourceId: ds-4fe70ee7-0ffa-4a1b-9595-e426e12b607a
        datarules:
          database: healthcare
          tables:
          - medical_records
          schema: public
          syncSchedule: null
          selectorLabel: []
        sourceUri: ""
      productOutputPorts:
      - name: PLATFORM_HOSTED
        endpoint: http://127.0.0.1:9014
        params: []
      queryPrompts: []
      artifacts:
      - artifact: asia-south1-docker.pkg.dev/vapusdata-beta/vapusdata-ecosystem/vapus-containers
        tag: local_vikrantsingh
        digest: sha256:c73ab3727504307838690cb94eb2bd51214e9a651e72e5de409654ae19077697
        isLatest: false
        addedOn: 1734435821
      - artifact: asia-south1-docker.pkg.dev/vapusdata-beta/vapusdata-ecosystem/vapus-containers
        tag: local_vikrantsingh
        digest: sha256:c73ab3727504307838690cb94eb2bd51214e9a651e72e5de409654ae19077697
        isLatest: false
        addedOn: 1734435821
      - artifact: asia-south1-docker.pkg.dev/vapusdata-beta/vapusdata-ecosystem/vapus-containers
        tag: local_vikrantsingh
        digest: sha256:c73ab3727504307838690cb94eb2bd51214e9a651e72e5de409654ae19077697
        isLatest: false
        addedOn: 1734435821
      - artifact: asia-south1-docker.pkg.dev/vapusdata-beta/vapusdata-ecosystem/vapus-containers_dmn-29c7ff1d-33cd-4b80-b322-eb5af50264d8-healthcare-dataset-1.2.0
        tag: ""
        digest: sha256:af54ef0e41092d31f48f622975dd75b0d60e2c21122a7b888265ebae832848ef
        isLatest: false
        addedOn: 1734599748
      - artifact: asia-south1-docker.pkg.dev/vapusdata-beta/vapusdata-ecosystem/vapus-containers_dmn-29c7ff1d-33cd-4b80-b322-eb5af50264d8-healthcare-dataset-1.3.0
        tag: ""
        digest: sha256:af54ef0e41092d31f48f622975dd75b0d60e2c21122a7b888265ebae832848ef
        isLatest: false
        addedOn: 1734599748
      - artifact: asia-south1-docker.pkg.dev/vapusdata-beta/vapusdata-ecosystem/vapus-containers_dmn-29c7ff1d-33cd-4b80-b322-eb5af50264d8-healthcare-dataset-1.4.0
        tag: ""
        digest: sha256:af54ef0e41092d31f48f622975dd75b0d60e2c21122a7b888265ebae832848ef
        isLatest: false
        addedOn: 1734599748
      - artifact: asia-south1-docker.pkg.dev/vapusdata-beta/vapusdata-ecosystem/vapus-containers_dmn-29c7ff1d-33cd-4b80-b322-eb5af50264d8-healthcare-dataset-1.5.0
        tag: ""
        digest: sha256:af54ef0e41092d31f48f622975dd75b0d60e2c21122a7b888265ebae832848ef
        isLatest: false
        addedOn: 1734599748
      - artifact: asia-south1-docker.pkg.dev/vapusdata-beta/vapusdata-ecosystem/vapus-containers_dmn-29c7ff1d-33cd-4b80-b322-eb5af50264d8-healthcare-dataset-1.6.0
        tag: ""
        digest: sha256:af54ef0e41092d31f48f622975dd75b0d60e2c21122a7b888265ebae832848ef
        isLatest: false
        addedOn: 1734599748
      - artifact: asia-south1-docker.pkg.dev/vapusdata-beta/vapusdata-ecosystem/vapus-containers_dmn-29c7ff1d-33cd-4b80-b322-eb5af50264d8-healthcare-dataset-1.7.0
        tag: ""
        digest: sha256:af54ef0e41092d31f48f622975dd75b0d60e2c21122a7b888265ebae832848ef
        isLatest: false
        addedOn: 1734599748
      - artifact: asia-south1-docker.pkg.dev/vapusdata-beta/vapusdata-ecosystem/vapus-containers_dmn-29c7ff1d-33cd-4b80-b322-eb5af50264d8-healthcare-dataset-1.8.0
        tag: ""
        digest: sha256:af54ef0e41092d31f48f622975dd75b0d60e2c21122a7b888265ebae832848ef
        isLatest: false
        addedOn: 1734599748
      - artifact: asia-south1-docker.pkg.dev/vapusdata-beta/vapusdata-ecosystem/vapus-containers_dmn-29c7ff1d-33cd-4b80-b322-eb5af50264d8-healthcare-dataset-1.9.0
        tag: ""
        digest: sha256:af54ef0e41092d31f48f622975dd75b0d60e2c21122a7b888265ebae832848ef
        isLatest: false
        addedOn: 1734599748
      - artifact: asia-south1-docker.pkg.dev/vapusdata-beta/vapusdata-ecosystem/vapus-containers_dmn-29c7ff1d-33cd-4b80-b322-eb5af50264d8-healthcare-dataset-1.10.0
        tag: ""
        digest: sha256:af54ef0e41092d31f48f622975dd75b0d60e2c21122a7b888265ebae832848ef
        isLatest: true
        addedOn: 1734599748
    lineage:
      dataWorkers: []
      description: ""
      versionLineage:
      - version: 1.0.0
        addedOn: 1734596457
        isLatest: true
        digest: null
        diff: ""
        backwardCompatibleVersions: []
      - version: 1.2.0
        addedOn: 1734599783
        isLatest: true
        digest:
          algo: 1
          digest: XgifjUJfzdfnMWFuR55axZ/NngwpyMk8031NIRmxRWI=
        diff: ""
        backwardCompatibleVersions:
        - '*'
      - version: 1.3.0
        addedOn: 1734943825
        isLatest: true
        digest:
          algo: 1
          digest: oDfjejZ7BNy5L6hBWFyzYY33yumDIN9fvdTJJ4q6uW8=
        diff: ""
        backwardCompatibleVersions:
        - '*'
      - version: 1.4.0
        addedOn: 1734970853
        isLatest: true
        digest:
          algo: 1
          digest: oLSwn35iWGvshaGOUffS5PaCQvMgXZ20mULpGpUe614=
        diff: ""
        backwardCompatibleVersions:
        - '*'
      - version: 1.5.0
        addedOn: 1734973249
        isLatest: true
        digest:
          algo: 1
          digest: GyPBTFb+eFTluSr0/QCpK49p4cuWm1gM5m/tHOGna30=
        diff: ""
        backwardCompatibleVersions:
        - '*'
      - version: 1.6.0
        addedOn: 1734974036
        isLatest: true
        digest:
          algo: 1
          digest: 2ebtrKpxGZFtySqM67YEEgqHHK9u3K7K3zCiirHNWcU=
        diff: ""
        backwardCompatibleVersions:
        - '*'
      - version: 1.7.0
        addedOn: 1735023543
        isLatest: true
        digest:
          algo: 1
          digest: /BlN6VP9Zg5ak5N9kuBc/uXrIUcFP5rt/514lcpIyEg=
        diff: ""
        backwardCompatibleVersions:
        - '*'
      - version: 1.8.0
        addedOn: 1735023857
        isLatest: true
        digest:
          algo: 1
          digest: JbkuziD7csnwH47/Fju3NRRG1/2ZxK4AfGG51s5UlnU=
        diff: ""
        backwardCompatibleVersions:
        - '*'
      - version: 1.9.0
        addedOn: 1735024641
        isLatest: true
        digest:
          algo: 1
          digest: IOVNbH42C4hiRIAgVhjSEs/mICgttq75EG/7dA5yxiw=
        diff: ""
        backwardCompatibleVersions:
        - '*'
      - version: 1.10.0
        addedOn: 1735024717
        isLatest: true
        digest:
          algo: 1
          digest: lMoc1hQzGOiowTxw10Foxv0s5dhFqAUzaH3a3FIyZt4=
        diff: ""
        backwardCompatibleVersions:
        - '*'
    workers: []
    compliances:
      compliancetypes: []
      requirementdetails: ""
      complianceowner: vikrant@vapusdata.com
      compliancestatus: 2
      lastauditedat: 0
      nextauditdue: 0
      retention: []
      dataentities:
      - name: name
        priority: 0
        description: ""
        totalentries: 0
        currentfirstrecordat: 0
        latestrecordat: 0
        fieldtype: 1
        compliancetypes:
        - 1
        totalnullentries: 0
        datatable: medical_records
        schema: public
        database: healthcare
      - name: insurance_provider
        priority: 0
        description: ""
        totalentries: 0
        currentfirstrecordat: 0
        latestrecordat: 0
        fieldtype: 4
        compliancetypes:
        - 1
        - 2
        totalnullentries: 0
        datatable: medical_records
        schema: public
        database: healthcare
      - name: gender
        priority: 0
        description: ""
        totalentries: 0
        currentfirstrecordat: 0
        latestrecordat: 0
        fieldtype: 1
        compliancetypes:
        - 1
        totalnullentries: 0
        datatable: medical_records
        schema: public
        database: healthcare
      - name: test_results
        priority: 0
        description: ""
        totalentries: 0
        currentfirstrecordat: 0
        latestrecordat: 0
        fieldtype: 4
        compliancetypes:
        - 2
        totalnullentries: 0
        datatable: medical_records
        schema: public
        database: healthcare
      - name: medical_condition
        priority: 0
        description: ""
        totalentries: 0
        currentfirstrecordat: 0
        latestrecordat: 0
        fieldtype: 4
        compliancetypes:
        - 2
        totalnullentries: 0
        datatable: medical_records
        schema: public
        database: healthcare
      - name: date_of_admission
        priority: 0
        description: ""
        totalentries: 0
        currentfirstrecordat: 0
        latestrecordat: 0
        fieldtype: 4
        compliancetypes:
        - 1
        - 2
        totalnullentries: 0
        datatable: medical_records
        schema: public
        database: healthcare
      - name: doctor
        priority: 0
        description: ""
        totalentries: 0
        currentfirstrecordat: 0
        latestrecordat: 0
        fieldtype: 4
        compliancetypes:
        - 2
        totalnullentries: 0
        datatable: medical_records
        schema: public
        database: healthcare
      - name: age
        priority: 0
        description: ""
        totalentries: 0
        currentfirstrecordat: 0
        latestrecordat: 0
        fieldtype: 1
        compliancetypes:
        - 1
        totalnullentries: 0
        datatable: medical_records
        schema: public
        database: healthcare
      - name: billing_amount
        priority: 0
        description: ""
        totalentries: 0
        currentfirstrecordat: 0
        latestrecordat: 0
        fieldtype: 3
        compliancetypes:
        - 1
        totalnullentries: 0
        datatable: medical_records
        schema: public
        database: healthcare
      - name: discharge_date
        priority: 0
        description: ""
        totalentries: 0
        currentfirstrecordat: 0
        latestrecordat: 0
        fieldtype: 4
        compliancetypes:
        - 1
        - 2
        totalnullentries: 0
        datatable: medical_records
        schema: public
        database: healthcare
    producers: []
    schemas:
    - datastore: healthcare
      dataTables:
      - name: medical_records
        fields:
        - name: ""
          field: room_number
          type: integer
          "null": "YES"
          key: ""
          default: ""
          extra: ""
        - name: ""
          field: date_of_admission
          type: date
          "null": "YES"
          key: ""
          default: ""
          extra: ""
        - name: ""
          field: discharge_date
          type: date
          "null": "YES"
          key: ""
          default: ""
          extra: ""
        - name: ""
          field: age
          type: integer
          "null": "YES"
          key: ""
          default: ""
          extra: ""
        - name: ""
          field: billing_amount
          type: double precision
          "null": "YES"
          key: ""
          default: ""
          extra: ""
        - name: ""
          field: hospital
          type: character varying
          "null": "YES"
          key: ""
          default: ""
          extra: ""
        - name: ""
          field: insurance_provider
          type: character varying
          "null": "YES"
          key: ""
          default: ""
          extra: ""
        - name: ""
          field: admission_type
          type: character varying
          "null": "YES"
          key: ""
          default: ""
          extra: ""
        - name: ""
          field: medication
          type: character varying
          "null": "YES"
          key: ""
          default: ""
          extra: ""
        - name: ""
          field: name
          type: character varying
          "null": "YES"
          key: ""
          default: ""
          extra: ""
        - name: ""
          field: test_results
          type: character varying
          "null": "YES"
          key: ""
          default: ""
          extra: ""
        - name: ""
          field: gender
          type: character varying
          "null": "YES"
          key: ""
          default: ""
          extra: ""
        - name: ""
          field: blood_type
          type: character varying
          "null": "YES"
          key: ""
          default: ""
          extra: ""
        - name: ""
          field: medical_condition
          type: character varying
          "null": "YES"
          key: ""
          default: ""
          extra: ""
        - name: ""
          field: doctor
          type: character varying
          "null": "YES"
          key: ""
          default: ""
          extra: ""
        totalRows: 0
        tableType: r
        averageRowLength: 0
        indexLength: 0
        CreatedAt: 0
        lastUpdatedAt: 0
        dataLength: 9412608
        engine: ""
        version: ""
        nature: 0
        totalSize: 0
        vapusQueryServerUri: 654bf3ad-9adb-48d3-a384-8c9fc58c7dab.public.medical_records
        schema: public
        generalUri: public.medical_records
        fedTableName: 654bf3ad-9adb-48d3-a384-8c9fc58c7dab.public.medical_records
      constraints: []
      description: ""
      trinoCatalog: 654bf3ad-9adb-48d3-a384-8c9fc58c7dab
      complianceFields: []
      metaSchemas:
      - public
      complianceTypes: []
    version: ""
    readiness: null
  status: PUBLISHED
  artifacts: []
  specDigest:
    algo: 1
    digest: b3mxP7Szjlgu2pYVUHkmCFUlwbDLgB3WoXdYHEDbdh4=
  labels:
  - key: Sales Dept
    value: dvdrentals
  tags:
  - healthcare
  - medical
  relatedDataProducts: []
  categories: []
  resources: null
  marketplaceIds:
  - marketplace-21f61e2c-820f-497c-8b46-fb44b1b1a385
  accessPolicies:
    userRules:
    - users:
      - vikrant@varcas.ai
      - vikrant@vapusdata.com
      - vsingh1918@gmail.com
      access: 0
      domain: dmn-39e6f292-9195-4216-977c-8e455fedd8d0
      selectorLabel: emergency-support-dept
    - users:
      - vikrant@varcas.ai
      - vikrant@vapusdata.com
      - goelarunk@gmail.com
      access: 0
      domain: dmn-48e7ac06-8276-444a-9bae-a0d38a594084
      selectorLabel: data-analytics-dept
    - users:
      - vikrant@vapusdata.com
      - vsingh1918@gmail.com
      access: 0
      domain: dmn-1f234399-f9b6-4e8f-b5af-d374c0ff9aeb
      selectorLabel: support-dept
    - users:
      - vikrant@varcas.ai
      - vikrant@vapusdata.com
      - goelarunk@gmail.com
      - vsingh1918@gmail.com
      access: 0
      domain: dmn-29c7ff1d-33cd-4b80-b322-eb5af50264d8
      selectorLabel: engg-dept
    roleRules:
    - roles: []
      access: 0
      selectorLabel: ""
      domain: ""
  contractDigest: f/1882PR0JulW1tUaSf7hkreH/V/1fr3UQgdhiz3p8g=
  hostScope: 0
  publishedOn: 0
  patchedOn: 1735024720
vapusdataplatformaddress: http://127.0.0.1:9014
dataproductdiscoveryuri: /api/v1alpha1/dataproducts
federatedqueryserveruri: /api/v1alpha1/dataserver/query
deploymentspec:
  base:
    createdat: 1735028906
    createdby: vikrant@vapusdata.com
    deletedat: 0
    deletedby: ""
    updatedat: 0
    updatedby: ""
    owneraccount: acc-b3ff28c3-f7c6-47e2-ac79-1f3b3eeb8ef4
    id: 39
    vapusid: vdcp-96f1cf64-4973-4df0-ae92-63301e68e1ed
    lastauditid: ""
    errorlogs: []
    domain: dmn-29c7ff1d-33cd-4b80-b322-eb5af50264d8
    status: DEPLOYING
    editors:
    - vikrant@vapusdata.com
  dataProductId: dp-a1efb46b-583c-47fd-b4be-b6bd49777525
  name: medical records dataset
  artifactPullSecrets: healthcare-unit-imgpullscrts
  namespace: genai-fed
  deploymentSpec:
    svcSecret: healthcare-data-0afcb
    svc: genai-fed-svc
    deployment: genai-fed
    svcConfig: genai-fed
    port: 9072
    httpPort: 9073
    svcAddress: ""
    svcType: LOADBALANCER
    svcPort: 9089
    nodePort: 0
    serviceAccount: genai-fed
  deployedAt: 1735028906
  svcAuthnSecrets: my-authn-secrets9
  scope: PLATFORM_DEPLOYMENT
  log: ""
  artifact: asia-south1-docker.pkg.dev/vapusdata-beta/vapusdata-ecosystem/vapus-containers_dmn-29c7ff1d-33cd-4b80-b322-eb5af50264d8-healthcare-dataset-1.10.0@sha256:af54ef0e41092d31f48f622975dd75b0d60e2c21122a7b888265ebae832848ef
  marketplaceId: vapusdata_datamesh_federated_catalog
dataquerygeneratoruri: /api/v1alpha1/dataserver/query-generator
